---
import { getCollection, render, type CollectionEntry } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import { slugifyPath } from '../../utils/slug';

export async function getStaticPaths() {
  const notes = await getCollection('uni');
  return notes.map((entry) => ({
    params: { slug: slugifyPath(entry.id) },
  }));
}

const requested = (Astro.params.slug as string).toLowerCase().replace(/-+/g, '-');
const all = await getCollection('uni');
const entry = all.find((e) => slugifyPath(e.id) === requested);
let Content: any;
let headings: { depth: number; slug: string; text: string; }[] = [];

if (entry) {
  const rendered = await render(entry);
  Content = rendered.Content;
  headings = rendered.headings || [];
} else {
  Astro.response.status = 404;
}
---
<html lang="en">
  <head>
    <BaseHead title={(entry?.data.title ?? requested) as string} description={(entry?.data.description ?? 'University notes') as string} />
    <style>
      .note-container {
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 3rem;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
      }
      
      .breadcrumb {
        grid-column: 1 / -1;
        font-family: "Inter", sans-serif;
        font-size: 0.9rem;
        margin-bottom: 2rem;
      }
      
      .breadcrumb a {
        color: var(--accent);
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s ease;
      }
      
      .breadcrumb a:hover {
        color: var(--accent-dark);
      }
      
      .note-content {
        min-width: 0; /* Prevents grid overflow */
      }
      
      .note-header {
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid rgb(var(--gold));
      }
      
      .note-title {
        font-family: "Inter", sans-serif;
        font-size: clamp(1.75rem, 4vw, 2.25rem);
        font-weight: 800;
        margin: 0 0 0.75rem 0;
        color: rgb(var(--black));
        letter-spacing: -0.03em;
        line-height: 1.15;
        background: linear-gradient(135deg, rgb(var(--black)) 0%, rgb(var(--gray-dark)) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }
      
      .note-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        font-family: "Inter", sans-serif;
        font-size: 0.9rem;
        color: rgb(var(--gray));
      }
      
      .note-meta-item {
        display: flex;
        align-items: center;
        gap: 0.4rem;
      }
      
      .course-badge {
        background: rgb(var(--navy));
        color: white;
        padding: 0.4rem 0.9rem;
        border-radius: 20px;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.8rem;
        letter-spacing: 0.05em;
      }
      
      .toc-sidebar {
        position: relative;
      }
      
      .prose {
        max-width: none;
        font-size: 1.0625rem;
        line-height: 1.8;
      }
      
      .prose :global(h2) {
        margin-top: 3rem;
        margin-bottom: 1.25rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid rgba(var(--gray-light), 0.8);
        scroll-margin-top: 6rem;
      }
      
      .prose :global(h3) {
        margin-top: 2.5rem;
        margin-bottom: 1rem;
        color: rgb(var(--gray-dark));
        scroll-margin-top: 6rem;
      }
      
      .prose :global(h4) {
        margin-top: 2rem;
        margin-bottom: 0.75rem;
        scroll-margin-top: 6rem;
      }
      
      .prose :global(ul), .prose :global(ol) {
        margin: 1.75rem 0;
        padding-left: 2rem;
      }
      
      .prose :global(li) {
        margin: 0.75rem 0;
        line-height: 1.8;
      }
      
      .prose :global(blockquote) {
        margin: 2.5rem 0;
        padding: 2rem;
        background: linear-gradient(135deg, rgba(var(--gold), 0.08) 0%, rgba(var(--cream), 0.4) 100%);
        border-left: 4px solid rgb(var(--gold));
        border-radius: 0 8px 8px 0;
        position: relative;
      }
      
      .prose :global(code) {
        font-size: 0.9em;
        background: rgba(var(--navy), 0.08);
        padding: 0.2em 0.4em;
        border-radius: 3px;
      }
      
      .prose :global(pre) {
        margin: 2rem 0;
        padding: 1.5rem;
        background: rgb(var(--cream));
        border: 1px solid rgb(var(--gray-light));
        border-radius: 8px;
        overflow-x: auto;
      }
      
      .error-container {
        grid-column: 1 / -1;
        text-align: center;
        padding: 4rem 2rem;
      }
      
      .error-container h1 {
        font-family: "Inter", sans-serif;
        font-size: 2rem;
        color: rgb(var(--gray-dark));
        margin-bottom: 1rem;
      }
      
      .error-container p {
        font-family: "Newsreader", serif;
        font-size: 1.125rem;
        color: rgb(var(--gray));
        margin-bottom: 2rem;
      }
      
      .view-all {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-family: "Inter", sans-serif;
        font-size: 0.9rem;
        color: var(--accent);
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s ease;
        padding: 0.75rem 1.5rem;
        border: 1px solid var(--accent);
        border-radius: 6px;
      }
      
      .view-all:hover {
        color: white;
        background: var(--accent);
      }
      
      @media (max-width: 1024px) {
        .note-container {
          grid-template-columns: 1fr;
          gap: 2rem;
        }
        
        .toc-sidebar {
          order: -1;
        }
      }
      
      @media (max-width: 768px) {
        .note-container {
          padding: 1rem;
        }
        
        .note-meta {
          flex-direction: column;
          align-items: flex-start;
          gap: 0.75rem;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <div class="note-container">
        <div class="breadcrumb">
          <a href="/">Home</a> / <a href="/uni">Study Notes</a> / {entry?.data.title ?? 'Note'}
        </div>
        
        {entry ? (
          <>
            <div class="note-content">
              <div class="note-header">
                <h1 class="note-title">{entry.data.title ?? requested}</h1>
                <div class="note-meta">
                  {entry.data.course && (
                    <span class="course-badge">{entry.data.course}</span>
                  )}
                  {entry.data.date && (
                    <span class="note-meta-item">
                      üìÖ {new Date(entry.data.date).toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      })}
                    </span>
                  )}
                  {entry.data.tags && entry.data.tags.length > 0 && (
                    <span class="note-meta-item">
                      üè∑Ô∏è {entry.data.tags.join(', ')}
                    </span>
                  )}
                </div>
              </div>
              
              <article class="prose">
                <Content />
              </article>
            </div>
            
            <aside class="toc-sidebar">
              <TableOfContents headings={headings} />
            </aside>
          </>
        ) : (
          <div class="error-container">
            <h1>Note Not Found</h1>
            <p>The requested study note could not be located.</p>
            <a href="/uni" class="view-all">
              Browse All Study Notes ‚Üí
            </a>
          </div>
        )}
      </div>
    </main>
    <Footer />
  </body>
</html>